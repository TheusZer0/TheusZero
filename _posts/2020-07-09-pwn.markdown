---
layout: post
title: "escritura de exploits"
subtitle: 'Resumen de conceptos y cosas que voy aprendiendo'
date: 2021-04-06 12:00:00
author: "TheusZero"
header-img: "images/post/pwn/pwnFondo.png"
catalog: true
comments: true
tags:
  - Linux
  - Explotations
  - Upgrade
  - Shell
  - Root
  - Reverse
---

## Videos

> []()

## Links ricolinos

> [Guia de escritura de exploits](https://fundacion-sadosky.github.io/guia-escritura-exploits/buffer-overflow/1-introduccion.html)

## Guia de Autoestudio

> un programa en assembler es una serie de instrucciones de máquina que al ejecutarse se almacenan en la memoria del proceso

> **ADD** es una **instruccion** que **suma 1** al contenido de **eax**
> ```Python
> instrucción       | contenido binario en mem.       | contenido hexa en mem. 
> add    eax, 0x1   | 1000 0011 1100 0000 0000 0001   | 83 c0 01
> ```

> ```Python
> dir. mem. | contenido en mem.   |   instrucción
> 08048334:   83 c0 01                add    eax,0x1
> 08048337:   83 c3 01                add    ebx,0x1
> 0804833a:   83 c0 02                add    eax,0x2
> 0804833c:   83 c3 02                add    ebx,0x2
> ```

> registros de propósito general de 32 bits están: 
> ```Python
> eax, ebx, ecx y edx. 
> ```
> 
> Por convención cuando los registros son de 64 bits se denominan: 
> ```Python
> rax, rbx, rcx y rdx
> ```

> ```Python
> ==========================
> registro eax = 00 00 00 00
> ==========================
> 
> dir. mem. | instrucción       | ¿qué hace?
> 08048334:   mov eax, 0x4      ; almacena el valor 4 en el registro eax
> 08048339:   add eax, 0x3      ; suma 3 al valor almacenado en eax
> 0804833f:   mov ebx, eax      ; almacena el valor del registro eax en ebx
> ==========================
> registro eax = 00 00 00 07
> registro ebx = 00 00 00 07
> ==========================
> ```

> Consideraciones: 
>> little endian (x86) se almacenan los datos al revez, es decir, el byte menos significativo se almacena en una posición de memoria menor, y así hasta el byte más significativo.
>
>> big endian (x64) los datos se almacenan de una forma normal
>
> ![](/TheusZero/images/post/pwn/1.png)
> 
> Por lo tanto, en little endian el dato 0x12345678 se almacena en memoria:
>> ```Python
>> El dato ABCD, es decir \x41\x42\x43\x44 se almacena en memoria como DCBA:
>> 0x44 | 0x43 | 0x42 | 0x41
>> n    | n+1  | n+2  | n+3
>> ```

#### Registro eip

> ```Python
> 
> ```

> ```Python
> 
> ```

> ```Python
> 
> ```

> ```Python
> 
> ```

> ```Python
> 
> ```

> ```Python
> 
> ```


## BufferOverflow
el buffer es un espacio de memoria que se reserva en el sistema para hacer una tarea en especifica y ese buffer tiene un tamano, el *BufferOverflow* ocurre cuando nosotros le pasamos mas memoria de la que este buffer puede almacenar, de manera que esta se desborda y no tiene control de esta misma.

![](/TheusZero/images/post/pwn/bufferCodeExample.png)

> Compilation Commands
>> ```echo 0 > /proc/sys/kernel/randomize_va_space```