---
layout: post
title: "ADS"
subtitle: 'ADS'
date: 2021-04-02 12:00:00
author: "TheusZero"
header-img: "images/post/PythonAutoayuda/solarized-wallpaper-python.png"
catalog: true
comments: true
tags:
    - Programacion
    - Python
    - USM
    - Tareas
    - Java
    - C++
---

## Clases

**clase 2**

#### Requisitos
Aplicados al software, cumplir con estos requisitos es fundamental
>> Descripciones de lo que el sistema debe/deberia hacer
> 
>> Capacidades y condiciones a las que el sistema debe adherir
> 
> Dos tipos:
> 
>> Funcionales
> 
>> Extra funcionales (No Funcionales)

**Funcionales**

Son las tareas faciles de identificar que en el software deben ser funcionalidades o servicios que el sistema debe o deberia realizar.

Funcionalidad: entrada de los datos / comportamiento de los mismos, con la funcionalidad del sistema / salida o resultado final para el usuario

>> Pueden existir limitaciones puestas por el usuario (reestricciones)
>
> ![](/TheusZero/images/post/ads/1.png)
 
Los requisitos extra-funcionales son importantes, son un gran impacto a nivel de la arquitectura y puede que haga la diferencia a la hora de que el usuario elija tu software

#### Requerimientos

Es un levantamiento o elicitacion (captar) de requerimientos.

> Aqui participan
>> Usuario: es Quien Utiliza el software. Una persona o una comunidad
> 
>> Cliente: Quien Paga por el software (inversionista)
> 
>> Stakeholder: Concepto generico para persona o institucion que tiene algun interes en el proyecto y que puede influir en las deciciones que se toman para el proyecto.
> 
>> Analista: Quien debe caracterizar y precisar lo que los usuarios o clientes requieren
>
> ![](/TheusZero/images/post/ads/2.png)

#### Diagrama de contexto

Nos sirve para graficar todo antes de ponernos a programas, es una forma de traducir los requerimientos y los requisitos, es una manera para desenvolvernos y comprender antes de programar.

> El software vive en un contexto
>> interactua con su entorno = interactua con funcionalidades de su entorno.
> 
>> Provee funcionalidades a su entorno | Necesita funcionalidades de su entorno
> ej: Necesitar cosas de la base de datos, ingresar valores a x lugar.

> primera aproximacion del sistema dentro de su entorno
> 
> Podemos identificar con quien se relaciona el sistema
>> Pero no nos dice la forma, no nos dice como conseguir algo (que servicios tecnicos tendra)

> Definir las fronteras o limites del sistema y como este interactua con su entorno.
>> estos limites pueden estar claramente definidos | Puede definirse en etapas tempranas, a base de criterios de funcionalidad.
>
>> Reconocer o identificar cuales seran funcionalidades automatizadas o manuales, ya que de esa forma sabremos que sera lo que el usuario ingresara en el software.

> Impacto
>> La toma de decisiones generan costos y beneficios
> 
> ![](/TheusZero/images/post/ads/4.png)
> 
> ![](/TheusZero/images/post/ads/3.png)
> 
>> Ambas opciones tienen costos y beneficios
> 
> ![](/TheusZero/images/post/ads/5.png)

#### Modelo de dominio

es una interpretacion del negocio, este mismo tiene un alcance

> tenemos que ser capaces de:
>> Comprender el contexto de negocio
> 
>> identificar conceptos clave
> 
>> entender como los conceptos se relacionan

El modelo de dominio es un diagrama que ilsutra clases (objetos) significativas de un dominio de problema particular para el analista y el disenador.
Su objetivo es visualizar y comprender la relacion de los conceptos que se manejan en el dominio del problema 
![](/TheusZero/images/post/ads/6.png)

![](/TheusZero/images/post/ads/7.png)

#### 



## Lecturas

#### Primera Lectura

> Unusable Software Is Useless | el software inutilizado es inutil

software person = persona de software = programador o arquitecto de software

LA USABILIDAD TIENE UN IMPACTO SIGNIFICATIVO
sobre el éxito de los sistemas y productos centrados en software.
Por ejemplo, si un sistema de software no es compatible con los usuarios finales en su trabajo diario, no se utilizará
productivamente. 

Del mismo modo, si los desarrolladores no entienden la arquitectura de su software,
la variacion de la complejidad y arquitectura del codigo seran consecuencias obvias.

En última instancia, no diseñar software utilizable
podría degradar seriamente la capacidad de un proyecto de entregarse a tiempo, presupuesto, funcionalidad y calidad.

En las dos próximas entregas de este
columna, exploro seleccionados pero esenciales
actividades, métodos y técnicas que sirven de apoyo a los arquitectos pragmáticos en el desarrollo de sistemas para su uso. Esta entrega en particular se centra en la usabilidad operativa; Me centro en dos aspectos que contribuyen significativamente a diseñar sistemas aceptados por clientes y usuarios finales: idoneidad empresarial y ergonomía.

>> Business Suitability | idoneidad(aptitud) empresarial

Cada sistema de software está construido para un propósito específico y negocio, todos lo sabemos.
Por lo tanto, el interés principal de los clientes es que el sistema de software que compran sirvan bien para sus negocios. 
Sin embargo, una y otra vez, he observado proyectos de software que **tienden a mantener el diálogo con los clientes en un "Mínimo inevitable"**,
como si fuera necesario pero no particularmente una actividad útil.
A pesar de todas las prácticas ágiles que recomiendan involucrarlos temprano a los clientes y, con regularidad, **"los clientes no saben lo que realmente quieren o necesitan”** es una frase que escucho a menudo.
La misma observación también se aplica a los productos de software, en que los principales "clientes" se encargan casi siempre de la gestión de productos de la empresa,
divisiones de marketing y ventas en vez de probar si es un buen producto para el usuario final (se encargan solo del marketing y no tanto de probar el producto).

Sin embargo, los proyectos de software que no están en continuo diálogo con las partes interesadas del negocio pierden una gran oportunidad
para ganar y que estas partes interesadas confien y se aseguren de sus sistemas de trabajo. 
Este diálogo puede ser un desafío para personas con fuerte antecedentes técnicos porque el interés empresarial de 
los titulares normalmente no hablan en términos de requisitos concretos o arquitectura de conceptos, 
solo hablan de las cosas en las que los arquitectos estan interesados.
Y si lo hacen, ellos tienden a expresar sus requisitos más como deseos o en términos vagos y ambiguos.

Sin embargo, los actores económicos (business stakeholders) estan generalmente interesadas en conocer 
el software o sistemas que patrocinan y ser involucrado en decisiones clave.
Para iniciar diálogo con las partes interesadas del negocio (business stakeholders), 
Los arquitectos pueden elegir entre un conjunto completo de métodos. 
La clave del éxito aquí es (en mi experiencia), que el propósito previsto del software sea el enfoque principal.
Comprender y capturar de manera concreta el dominio de un modelo suele ser un buen
comienzo para obtener la perspectiva general del cliente en un sistema.
Esto a menudo significa menos en términos de requisitos concretos pero más en términos de la estructura
de este sudominio y, lo que es más importante, que el núcleo de trabajo fluya, tareas y actividades que para transpirar y desarrollar asi
ese dominio. Trabajar en el modelo del dominio también indica a los clientes que los arquitectos hablan en el "correcto"
idioma y pueden entender sus intereses.

En todos los proyectos en los que me he envuelto en mi carrera, los consumidores o clientes han confirmado 
que elaborar un modelo de dominio fue un resultado valioso para ellos mismos, incluso desde, una perspectiva tecnica,
eso era "solo" un vehículo para impulsar el diseño y implementación de una manera correcta.

Los modelos de dominio también son vehículos adecuados para obtener y aclarar requisitos clave junto con especificaciones de escenarios concretos.
Los escenarios ayudan a especificar los estímulos relevantes y las respuestas esperadas para todas las tareas relevantes del sistema.
ellos consideran el sistema en sí ser una **black box**.
La asignación de escenarios al modelo de dominio amplía esta vista a cómo el sistema realizará tareas relevantes como flujos de trabajo concretos en el dominio de la aplicación, incluidos los requisitos de calidad relevantes, como el rendimiento y las variaciones de escenario.
Utilizando el modelo de dominio y los escenarios como guía, la especificación y clasificación del alcance y los requisitos de un sistema se basa, por lo tanto, en menos suposiciones y más en las necesidades reales y el valor comercial.

Otros métodos ayudan en la comunicacion de la arquitectura del sistema,
las consecuencias y las compensaciones, junto con los comentarios recibidos sobre si cumple las expectativas del cliente
Este tipo de esqueleto ayuda al arquitecto a realizar escenarios funcionales clave al ilustrar cómo funciona la arquitectura a través de la experiencia del sistema real en lugar de descripciones formales del diseño.
Las notaciones de modelado de software y sistemas son útiles y esenciales para la documentación y comunicación técnica adecuadas de una arquitectura, pero es probable que requieran una explicación significativa para que las partes interesadas del negocio las comprendan.
La experiencia real del sistema también es esencial para obtener comentarios útiles sobre la idoneidad de la arquitectura; Las partes interesadas del negocio a menudo no pueden discutir las consecuencias de las decisiones de diseño basadas en diagramas o descripciones textuales.

Cuando es necesario explicar las arquitecturas a través de diagramas técnicos, 
las metáforas son un vehículo útil porque ayudan a esbozar el diseño concreto de un sistema
al describirlo en términos de como es su estructura pero aplicado en un contexto sobre algo del mundo real. Por ejemplo, suelo utilizar la metáfora de "herramientas y materiales" para describir la estructura clave de los editores gráficos.
los objetos que manipula el sistema corresponden a los materiales y la funcionalidad de edición a las herramientas. El concepto de "carrito de compras" es otra metáfora bien conocida que se usa comúnmente para describir la funcionalidad de compra en los sistemas de comercio electrónico.

>> Ergonomics | Ergonomía

Los usuarios finales viven con los sistemas que construimos, por lo que su principal interés es que estos sistemas respalden su trabajo diario de manera efectiva.
De lo contrario, es probable que no acepten nuestros sistemas porque los hacen menos productivos.
En dominios críticos para la seguridad, como la automatización ferroviaria,
la capacidad de usar un sistema de manera efectiva y correcta en todas las circunstancias
relevantes es realmente obligatoria para obtener la certificación necesaria.

Desafortunadamente, parece existir un conflicto entre
la visión técnica de muchos programadores de software
y la visión orientada a tareas de muchos usuarios finales. Un ejemplo del mundo real que encontré recientemente en uno de mis proyectos fue una herramienta de ingeniería para un producto de automatización industrial.
Esta herramienta expuso la vista física completa del producto, que constaba de aproximadamente 10,000 parámetros, al usuario final, sin embargo, la mayoría de los usuarios no estaban interesados en configurar parámetros individuales de la máquina porque es una actividad tediosa y propensa a errores.
En cambio, su principal interés estaba en diseñar tareas completas que fueran significativas en su dominio de aplicación, como encender una máquina específica o mover la máquina a una posición de mantenimiento.

Claramente, una forma eficaz de comprender las necesidades y los requisitos del usuario final es involucrar a los usuarios de forma activa en el diseño del sistema, con un enfoque en la interacción persona-computadora.

HCI se centra específicamente en los usuarios de un sistema
y las tareas que realizan: ¿Qué características debería ofrecer el sistema para realizar tareas específicas del usuario? ¿Qué pasos son necesarios para realizar esas tareas de manera eficiente? ¿Cómo debería ofrecer sus funciones la interfaz de usuario del sistema?
En mi experiencia, es en realidad esta orientación de tareas la que permite a los usuarios trabajar con un sistema de manera productiva porque admite una operación del sistema intuitiva e integrada. No se logra a través de una apariencia elegante de la interfaz de usuario, como podrían asumir algunos programadores de software. Un aspecto nuevo y atractivo suele ser más importante para fines de marketing, para indicar que un sistema está actualizado y sigue la última tecnología.

Métodos como el diseño participativo o el diseño centrado en el uso, junto con patrones y prácticas documentados para HCI, permiten el diseño cooperativo de interfaces de usuario orientadas a tareas y diseños de flujo de trabajo. Estos métodos definen actividades concretas para la cooperación entre usuarios y desarrolladores y los resultados y artefactos esperados.
Muchos de los proyectos en los que estoy involucrado actualmente llevan a cabo talleres de usabilidad regulares con clientes y usuarios finales.
Los patrones y prácticas de HCI definen un lenguaje común entendido por todas las partes: los usuarios finales pueden expresar lo que necesitan, y los arquitectos y desarrolladores obtienen información sobre qué construir y cómo.

Por ejemplo, los patrones de Jan Borchers para hardware invisible y dispositivos apropiados para el dominio enfatizan la importancia de ocultar tecnologías de hardware complejas y desconocidas a los usuarios del sistema.
permitiéndoles en cambio comunicarse con el sistema utilizando dispositivos y abstracciones que conocen de sus propios dominios. Otros patrones, como el árbol plano y estrecho y la información justo a tiempo, logran el equilibrio estrecho entre no abrumar a los usuarios con demasiada información y proporcionar datos insuficientes.

De manera similar a la discusión anterior sobre la idoneidad empresarial, la participación de los usuarios finales en el diseño de HCI de un sistema guía el trabajo de arquitectura concreta de un proyecto de software. Los estudios de usabilidad con prototipos de interfaz o, mejor aún, esqueletos ambulantes, brindan información sobre la usabilidad real de ese diseño, con una oportunidad adicional para mejoras y ajustes. El ciclo de retroalimentación de la participación activa del usuario se cierra, pero de una manera que brinda a los arquitectos la mejor orientación para diseñar sistemas con los que los usuarios finales puedan "vivir bien".

Los desarrolladores son el tercer grupo importante de usuarios de sistemas centrados en software: viven dentro de la arquitectura y el código de un sistema.
Por lo tanto, es una responsabilidad clave de los arquitectos asegurarse de que los desarrolladores se sientan habitables allí. La próxima entrega de esta columna explorará los métodos y las mejores prácticas que ayudan a los arquitectos a lograr esta tarea.

**Resumen**

> Business Suitability
>> los proyectos de software que no están en continuo diálogo con las partes interesadas del negocio pierden una gran oportunidad para ganar y que estas partes interesadas confien y se aseguren de sus sistemas de trabajo.
> 
>>  los actores económicos (business stakeholders) estan generalmente interesadas en conocer el software o sistemas que patrocinan y ser involucrado en decisiones clave.
> 
>> el propósito previsto del software sea el enfoque principal. Comprender y capturar de manera concreta el dominio de un modelo suele ser un buen comienzo para obtener la perspectiva general del cliente en un sistema
> 
>> los consumidores o clientes han confirmado que elaborar un modelo de dominio fue un resultado valioso para ellos mismos
> 
>> modelos de dominio también son vehículos adecuados para obtener y aclarar requisitos clave junto con especificaciones de escenarios concretos
> 
>> Utilizando el modelo de dominio y los escenarios como guía, la especificación y clasificación del alcance y los requisitos de un sistema se basa, por lo tanto, en menos suposiciones y más en las necesidades reales y el valor comercial.
> 
>> Cuando es necesario explicar las arquitecturas a través de diagramas técnicos, las metáforas son un vehículo útil porque ayudan a esbozar el diseño concreto de un sistema al describirlo en términos de como es su estructura pero aplicado en un contexto sobre algo del mundo real
> 

> Ergonomics
>> Los usuarios finales viven con los sistemas que construimos, por lo que su principal interés es que estos sistemas respalden su trabajo diario de manera efectiva
> 
>>  la mayoría de los usuarios no estaban interesados en configurar parámetros individuales de la máquina porque es una actividad tediosa y propensa a errores
> 
>> una forma eficaz de comprender las necesidades y los requisitos del usuario final es involucrar a los usuarios de forma activa en el diseño del sistema, con un enfoque en la interacción persona-computadora
> 
>> HCI se centra específicamente en los usuarios de un sistema y las tareas que realizan
> 
>>  los patrones de Jan Borchers para hardware invisible y dispositivos apropiados para el dominio enfatizan la importancia de ocultar tecnologías de hardware complejas y desconocidas a los usuarios del sistema
>>>  permitiéndoles en cambio comunicarse con el sistema utilizando dispositivos y abstracciones que conocen de sus propios dominios
> 
>> La Interacción Persona-Ordenador del inglés Human Computer Interaction (HCI) «es una disciplina relacionada con el diseño, evaluación, desarrollo y estudio de los fenómenos que rodean los sistemas informáticos para uso humano»