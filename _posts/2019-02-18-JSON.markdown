---
layout: post
title: "JS0N"
subtitle: 'HackTheBox - Medium Machine - Linux'
date: 2019-11-08 12:00:00
author: "TheusZero"
header-img: "images/post/js0n.png"
catalog: true
comments: true
tags:
  - Windows
  - Machine
  - Explotations
  - Upgrade
  - Shell
  - Root
  - User
---

# JS0N


## Enumeracion

#### NMAP

Primero empezamos con un NMAP comun para ver con que puertos podemos jugar:

```vim
# Nmap 7.80 scan initiated Tue Feb 18 20:14:13 2020 as: nmap -sC -sV -o nmap.txt 10.10.10.158
Nmap scan report for 10.10.10.158
Host is up (0.19s latency).
Not shown: 988 closed ports
PORT      STATE SERVICE      VERSION
21/tcp    open  ftp          FileZilla ftpd
| ftp-syst: 
|_  SYST: UNIX emulated by FileZilla
80/tcp    open  http         Microsoft IIS httpd 8.5
| http-methods: 
|_  Potentially risky methods: TRACE
|_http-server-header: Microsoft-IIS/8.5
|_http-title: Json HTB
135/tcp   open  msrpc        Microsoft Windows RPC
139/tcp   open  netbios-ssn  Microsoft Windows netbios-ssn
445/tcp   open  microsoft-ds Microsoft Windows Server 2008 R2 - 2012 microsoft-ds
49152/tcp open  msrpc        Microsoft Windows RPC
49153/tcp open  msrpc        Microsoft Windows RPC
49154/tcp open  msrpc        Microsoft Windows RPC
49155/tcp open  msrpc        Microsoft Windows RPC
49156/tcp open  msrpc        Microsoft Windows RPC
49157/tcp open  msrpc        Microsoft Windows RPC
49158/tcp open  msrpc        Microsoft Windows RPC
Service Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windows

Host script results:
|_clock-skew: mean: 4h01m23s, deviation: 0s, median: 4h01m23s
|_nbstat: NetBIOS name: JSON, NetBIOS user: <unknown>, NetBIOS MAC: 00:50:56:bd:5f:22 (VMware)
|_smb-os-discovery: ERROR: Script execution failed (use -d to debug)
| smb-security-mode: 
|   account_used: guest
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled (dangerous, but default)
| smb2-security-mode: 
|   2.02: 
|_    Message signing enabled but not required
| smb2-time: 
|   date: 2020-02-19T03:16:53
|_  start_date: 2020-02-18T23:38:47

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Tue Feb 18 20:15:35 2020 -- 1 IP address (1 host up) scanned in 82.42 seconds
```
> 21/tcp    open  ftp          FileZilla ftpd
 | ftp-syst: 
 |_  SYST: UNIX emulated by FileZilla

Puede que este puerto nos sirva por lo que procederemos a ver que tal

#### FTP

Al intentar entrar por FTP obtengo lo siguiente:

```vim
root@Kali:~/HTB/Machines/JS0N# ftp -v 10.10.10.158
Connected to 10.10.10.158.
220-FileZilla Server 0.9.60 beta
220-written by Tim Kosse (tim.kosse@filezilla-project.org)
220 Please visit https://filezilla-project.org/
Name (10.10.10.158:root): anonymous
331 Password required for anonymous
Password:
530 Login or password incorrect!
Login failed.
Remote system type is UNIX.
ftp> quit
221 Goodbye
```

fallido, sin embargo hay algo raro:

>FileZilla Server 0.9.60 beta

Puede que sirva para algo uwu, a googlear se ha dicho.

#### 80 HTTP 
Aqui paso algo raro, al entrar al puerto 80 por el navegador ocurre una redireccion a un login, que me pide un email y una password (que quiza pueda obtener del smbclient) por lo cual explorare colocando a no cargar cuando me quiera redirigir.

![](/TheusZero/images/post/Js0n/JS0N1.png)

Haciendo un burpsuite a login obtengo esto:

![](/TheusZero/images/post/Js0n/JS0N2.png)

Probando usuarios, me salia esto:

> "User Not Exists"

Asi que me puse a probar, hasta que encontre la terminacion 

> USER: admin PASSWORD: admin

y en burpsuite me entrego esta cookie:

> OAuth2=eyJJZCI6MSwiVXNlck5hbWUiOiJhZG1pbiIsIlBhc3N3b3JkIjoiMjEyMzJmMjk3YTU3YTVhNzQzODk0YTBlNGE4MDFmYzMiLCJOYW1lIjoiVXNlciBBZG1pbiBIVEIiLCJSb2wiOiJBZG1pbmlzdHJhdG9yIn0=

Es un base 64 que nos da lo siguiente:

>{"Id":1,"UserName":"admin","Password":"21232f297a57a5a743894a0e4a801fc3","Name":"User Admin HTB","Rol":"Administrator"}\

```vim
#
import operator
def estadisticasPersonas(GeneroPersona,GeneroPelicula):
    #OpenFile
    Notas = open('notas.csv','r')
    Peliculas = open('peliculas.csv','r')
    Usuarios = open('usuarios.csv','r')

    #ReadFile
    Lineas = Peliculas.readlines()
    Read_Usuarios = Usuarios.readlines()

    #Variables
    Id_GeneroPelicula = list()
    Id_Usuarios = list()
    Rango_Etario = list()
    Id_Final = list()
    lista_Final = []
    Final = list()
    Contador =0

    #OtherVariables

    Menor_diesiocho = 0
    Diesiocho = 0
    Veinticinco = 0
    TreintaCinco = 0
    CuarentaCinco = 0
    Cincuenta = 0
    Mayor = 0

    #Code
    for x in Lineas: #Aqui obtengo todos los ID del genero de la pelicula
        ListaPeliculas = x.strip().split(',')
        if GeneroPelicula in ListaPeliculas[2]:
            Id_GeneroPelicula.append(ListaPeliculas[0])
    for i in Read_Usuarios:
        ListaUsuarios = i.strip().split(',')
        if GeneroPersona == ListaUsuarios[1]:
            Id_Usuarios.append(ListaUsuarios[0])  # Aqui obtengo el ID del genero del usuario
    for z in Notas:
        notas = z.strip().split(',')
        if notas[1] in Id_GeneroPelicula and notas[0] in Id_Usuarios:
            Id_Final.append(notas[0])
    for i in Id_Final:
        if i not in lista_Final:
            lista_Final.append(i)
    for z in range(len(lista_Final)):
        Contador += 1
    for i in Read_Usuarios:
        ListaUsuarios = i.strip().split(",")
        for x in range(Contador):
            if lista_Final[x] == ListaUsuarios[0]:
                Rango_Etario.append(ListaUsuarios[2])
    for x in range(len(Rango_Etario)):
        if Rango_Etario[x] == '1':
            Menor_diesiocho += 1
        if Rango_Etario[x] == '18':
            Diesiocho += 1
        if Rango_Etario[x] == '25':
            Veinticinco += 1
        if Rango_Etario[x] ==  '35':
            TreintaCinco += 1
        if Rango_Etario[x] == '45':
            CuarentaCinco += 1
        if Rango_Etario[x] == '50':
            Cincuenta += 1
        if Rango_Etario[x] == '56':
            Mayor += 1

    #FinalCode
    Final.append(Menor_diesiocho)
    Final.append(Diesiocho)
    Final.append(Veinticinco)
    Final.append(TreintaCinco)
    Final.append(CuarentaCinco)
    Final.append(Cincuenta)
    Final.append(Mayor)
    return Final
def recomendadorEdadGenero(Edad,Genero):
    #OpenFile
    Notas = open('notas.csv','r')
    Peliculas = open('peliculas.csv','r')
    Usuarios = open('usuarios.csv','r')
    #Edad
    if Edad < 18:
        Edad = 1
    if Edad>=18 and Edad<=24:
        Edad = 18
    if Edad>=25 and Edad<=34:
        Edad = 25
    if Edad>=35 and Edad<=44:
        Edad = 35
    if Edad>=45 and Edad<=49:
        Edad = 45
    if Edad>=50 and Edad<=55:
        Edad = 50
    if Edad > 55:
        Edad = 56
    #Variables
    Id_Usuarios = list()
    Contador = 0
    ListaNotas = list()
    #Code
    for i in Usuarios:
        ListaUsuarios = i.strip().split(',')
        if Genero == ListaUsuarios[1] and Edad == int(ListaUsuarios[2]):
            Id_Usuarios.append(ListaUsuarios[0])  # Aqui obtengo el ID del genero del usuario
    for x in Notas:
        ListaNotas.append(x.strip().split(","))
    for z in ListaNotas:
        Contador += 1
    for i in range(0,Contador):
        print(ListaNotas[i][0])
        if Id_Usuarios[i] in ListaNotas[i][0]:
            print(ListaNotas[i])
def ranking(Genero):
    #Read
    File_Peliculas = open('peliculas.csv')
    ReadLines_Pelicula = File_Peliculas.readlines()
    Pelicula_Lista = list()
    File_Notas = open('notas.csv')
    ReadLines_Notas = File_Notas.readlines()
    Notas_Lista = list()

    #Variables
    Peliculas_Mismo_Genero = []
    IdPeliculas = list()
    ListaFinal = list()
    Lista_Notas_Pelicula = list()

    #Code
    for x in ReadLines_Pelicula:
        Pelicula_Lista.append(x.strip().split(','))
    for z in range(0,len(Pelicula_Lista)):
        if Genero in Pelicula_Lista[z][2]:
            IdPeliculas.append(Pelicula_Lista[z][0]) #Aqui saco todos los ID de las peliculas Del Genero
            Peliculas_Mismo_Genero.append(Pelicula_Lista[z])
            Peliculas_Mismo_Genero[-1].append([0,0,0]) #SumaNota #Cantidad de Notas #NotaFinal
    for r in ReadLines_Notas:
        Notas_Lista.append(r.strip().split(","))
    for y in range(len(Notas_Lista)):
        if (Notas_Lista[y][1]) in IdPeliculas:
            Peliculas_Mismo_Genero[IdPeliculas.index((Notas_Lista[y][1]))][-1][0]+=int((Notas_Lista[y][2])) #SumaNotas
            Peliculas_Mismo_Genero[IdPeliculas.index((Notas_Lista[y][1]))][-1][1]+=1
    for x in range(len(Peliculas_Mismo_Genero)):
        if int(Peliculas_Mismo_Genero[x][3][1])>=5:
            NotaFinal = int(Peliculas_Mismo_Genero[x][3][0])/(int(Peliculas_Mismo_Genero[x][3][1]))
            Peliculas_Mismo_Genero[x][3][2] += NotaFinal
            ListaFinal.append(Peliculas_Mismo_Genero[x])
    for x in range(len(ListaFinal)):
        Lista_Notas_Pelicula.append(ListaFinal[x][3][2])
        Lista_Notas_Pelicula.append(ListaFinal[x][1])
    lst = Lista_Notas_Pelicula
    op = {lst[i]: lst[i + 1] for i in range(0, len(lst), 2)}
    Resultado = sorted(op.items(), key=operator.itemgetter(0), reverse=True)
    Lista_Peliculas = list()
    Contador = 1
    for x in Resultado:
        Lista_Peliculas.append([Contador,x[1],round(x[0],2)])
        Contador+=1
        if Contador == 11:
            return Lista_Peliculas
while True:
    try:
        Opcion = int(input("Ingrese una opcion: "))
        if Opcion == 1:
            GeneroP = input("Ingrese genero persona: ")
            GeneroPelicula = input("Ingrese genero pelicula: ")
            Estadistica_de_Personas = estadisticasPersonas(GeneroP,GeneroPelicula)
            print("Rango menor 18: ", Estadistica_de_Personas[0])
            print("Rango 18-24: ", Estadistica_de_Personas[1])
            print("Rango 25-34: ", Estadistica_de_Personas[2])
            print("Rango 35-44: ", Estadistica_de_Personas[3])
            print("Rango 45-49: ", Estadistica_de_Personas[4])
            print("Rango 50-55: ", Estadistica_de_Personas[5])
            print("Rango mayor 56: ", Estadistica_de_Personas[6])
            print(" ")
        if Opcion == 2:
           recomendadorEdadGenero(int(input("Ingrese su edad: ")),input("ingrese su genero: "))
        if Opcion ==3:
            Genero = input("Ingrese un genero: ")
            Lista = ranking(Genero)
            file = open('Top'+Genero+'.txt', 'w')
            for x in range(len(Lista)):
                Lugar = str(Lista[x][0])+","
                Pelicula = str(Lista[x][1])+","
                Nota = str(Lista[x][2])
                file.write(Lugar)
                file.write(Pelicula)
                file.write(Nota)
                file.write('\n')
            file.close()
        if Opcion ==4:
            break
    except:
        None
```

```vim
#Nombre Apellido, Paralelo N
#Funcion para leer el archivo "peliculas.csv"
def leer_archivo_peliculas():
    movies=[] #lista que almacenara para retorna la informacion
    data=open("peliculas.csv","r",encoding='ISO-8859-1') #apertatura del archivo en formato lectura
    for line in data: #se recorre cada linea del archivo
        parse=(line.strip("\n\r").split(",")) #se eliminan caracteres problematicos y se separa en una lista mediante ","
        parse[-1]=parse[-1].split("|") #se coloca el genero en una lista para hacer mas facil el analisis
        movies.append(parse)#se agrega a la linea de retorno
    data.close()#Cierra el archivo
    return movies#retorna la lista con la informacion preparada para el analisis

#Funcion para leer el archivo "notas"
def leer_archivo_notas():
    notes=[] #Lista donde se almacenara la informacion
    data=open("notas.csv","r")#apertura de archivo a usar
    for line in data:#se recorre cada linea del archivo
        parse=(line.strip("\n\r").split(","))#se quitan caracteres que no sirven y se separa por "," en una lista
        notes.append(parse)#se agregan los datos limpios como listas a otra lista
    data.close()#se cierra el archivo
    return notes#se retorna la lista con las notas

#Funcion para leer el archivo "notas"
def leer_archivo_usuarios():
    users=[] #lista que almacenara las listas de datos
    data=open("usuarios.csv","r") #apertura del archivo
    for line in data:#recorrido de linea a linea del archivo
        parse=(line.strip("\n\r").split(","))#se quitan los caracteres inserbibles y se hace una lista de los datos separados por ","
        users.append(parse)#se agrega la lista obtenida de una linea a otra lista
    data.close() #se cierra el archivo
    return users#se retorna la lista con los usuarios

#Funcion para separar por indice en una lista los rangos etarios
def ordenar_rango_etario(lista_usuarios):
    rango_etario=[[],[],[],[],[],[],[]]#lista donde iran los usuarios por rango etario de menor a mayor
    for usuario in lista_usuarios:#se recorre la lista
    #se ordenan los usuarios segun su rango etario en la lista rango_etario
        if usuario[2]=="1":
            rango_etario[0].append(usuario)
        elif usuario[2]=="18":
            rango_etario[1].append(usuario)
        elif usuario[2]=="25":
            rango_etario[2].append(usuario)
        elif usuario[2]=="35":
            rango_etario[3].append(usuario)
        elif usuario[2]=="45":
            rango_etario[4].append(usuario)
        elif usuario[2]=="50":
            rango_etario[5].append(usuario)
        elif usuario[2]=="56":
            rango_etario[6].append(usuario)
    return rango_etario #retorna la lista con los usuarios  y los rangos ordenados

#Funcion para obtener por genero de pelicula y persona la cantidad de personas segun su rango etario
def estadisticos_de_personas(movies, notes,range_etary,g_person,g_movie):
    id_movies=[]
    id_person=[]
    cant_rango_etario=[0,0,0,0,0,0,0]
    #se recorren los generos de las peliculas y se agrega su id a la lista id_movies
    for mov in movies:
        if g_movie in mov[2]:
            id_movies.append(mov[0])
    #se recorren las notas de las personas y se almacena el id de usuario que concuerda con el id de la pelicula del genero
    for note in notes:
        if note[1] in id_movies:
            id_person.append(note[0])
    #se añade la cantidad de persona a su debido rango etario sumandole +1 al contandor cant_rango_etario
    for i in range(0,7):
        for person in range_etary[i]:
            if (person[0] in id_person) and (person[1]==g_person):
                cant_rango_etario[i]+=1
    return cant_rango_etario #retorna la cantidad separada por rango etario


def recomendar_por_edad_y_genero(movies, notes,range_etary,g_person,person_year):
    i=0
    id_usuarios=[]
    promediar=[]
    promediar_limpio=[]
    if person_year<18:
        i=0
    elif person_year>=18 and person_year<=24:
        i=1
    elif person_year>=25 and person_year<=34:
        i=2
    elif person_year>=35 and person_year<=44:
        i=3
    elif person_year>=45 and person_year<=49:
        i=4
    elif person_year>=50 and person_year<=55:
        i=5
    elif person_year>=56:
        i=6

    for person in range_etary[i]:
        if person[1]==g_person:
            id_usuarios.append(person[0])
    for data_notes in notes:
        if data_notes[0] in id_usuarios:
            if data_notes[1] not in promediar:
                promediar.append(data_notes[1])
                promediar.append([0,0])
            else:
                x=promediar.index(data_notes[1])
                promediar[x+1][0]+=int(data_notes[2])
                promediar[x+1][1]+=1
    for z in range(1,len(promediar),2):
        if not int(promediar[z][1])<=10:
            promediar_limpio.append([promediar[z-1],(promediar[z][0]/promediar[z][1])])
    promedios_lista=[]
    for element in promediar_limpio:
        promedios_lista.append(round(element[1],2))
    for movie in movies:
        if promediar_limpio[promedios_lista.index(max(promedios_lista))][0]== movie[0]:
            return movie[1]

def ranking(movies, notes,range_etary,g_movies):
    peliculas_a_usar=[]
    id_peliculas=[]
    for mov in range(0,len(movies)):
        if g_movies in movies[mov][2]:
            peliculas_a_usar.append(movies[mov])
            peliculas_a_usar[-1].append([0,0])
    for movie in peliculas_a_usar:
        id_peliculas.append(movie[0])
    for nota in notes:
        if nota[1] in id_peliculas:
            peliculas_a_usar[id_peliculas.index(nota[1])][-1][0]+=int(nota[2])
            peliculas_a_usar[id_peliculas.index(nota[1])][-1][1]+=1
    peliculas_a_usar_limpias=[]
    for pel in peliculas_a_usar:
        if not pel[-1][1]<=10:
            peliculas_a_usar_limpias.append(pel)
    for pel in peliculas_a_usar_limpias:
        pel[-1][0]/=pel[-1][1]



    promedios=[]
    ids=[]
    ordenados=[]
    for movie in peliculas_a_usar_limpias:
        promedios.append(movie[-1][0])
        ids.append(movie[0])
    print(promedios)
    print(ids)
    for i in range(1,11):
        ordenados.append([ids[promedios.index(max(promedios))],'',round(max(promedios),2)])
        promedios.pop(promedios.index(max(promedios)))
        ids.pop(promedios.index(max(promedios)))
    for elemento in ordenados:
        for movie in movies:
            if elemento[0]==movie[0]:
                elemento[1]=movie[1]
    return ordenados

peliculas=leer_archivo_peliculas()
notas=leer_archivo_notas()
usuarios_ordenados_rango_etario=ordenar_rango_etario(leer_archivo_usuarios())

#Menu#####################################################
o=0
while (o!="4"):
    print("Menu Principal\n1. Estadisticos de personas\n2. Recomendador por edad y genero\n3. Ranking\n4. Salir")
    o=input("Ingrese Una Opcion: ")
    if o =="1":
        genero_persona=str(input("Ingrese genero persona: "))
        genero_pelicula=str(input("Ingrese genero pelicula: "))
        rango_suma=estadisticos_de_personas(peliculas,notas,usuarios_ordenados_rango_etario,genero_persona,genero_pelicula)
        print("Rango menor 18: {}\nRango 18-24: {}\nRango 25-34: {}\nRango 35-44: {}\nRango 45-49: {}\nRango 50-55: {}\nRango mayor 56: {}".format(rango_suma[0],rango_suma[1],rango_suma[2],rango_suma[3],rango_suma[4],rango_suma[5],rango_suma[6]))
    elif o=="2":
        edad_persona=int(input("Ingrese su edad: "))
        genero_persona=str(input("Ingrese su genero: "))
        print(recomendar_por_edad_y_genero(peliculas,notas,usuarios_ordenados_rango_etario,genero_persona,edad_persona))
    elif o=="3":
        genero_pelicula=str(input("Ingrese genero: "))
        data_ranking=ranking(peliculas,notas,usuarios_ordenados_rango_etario,genero_pelicula)
        with open("top"+genero_pelicula+".txt","w") as top:
            for i in range(0,(len(data_ranking))):
                top.write(str(i+1)+", "+data_ranking[i][1]+", "+str(data_ranking[i][2])+"\n")

else:
    print("Terminando Programa")
#for i in usuarios_ordenados_rango_etario[0]:
#    print(i)
```
