---
layout: post
title: "TryHackMe: Intro to x86-64"
subtitle: 'TryHackMe Room para aprender reversing y r2'
date: 2020-07-15 12:00:00
author: "TheusZero"
header-img: "images/post/x86-64/image0.png"
catalog: true
comments: true
tags:
  - Assembly
  - Explotations
  - Upgrade
  - Shell
  - Linux
  - C
  - Reversing
---

## Links Ricolinos

[radare2 cheatsheet](https://gist.github.com/williballenthin/6857590dab3e2a6559d7)
[radare2 manual](https://github.com/radareorg/radare2/blob/master/doc/intro.md)

## Descripcion

Esta sala analiza las tareas primitivas básicas del lenguaje ensamblador x86-64 de Intel, y utilizará estas primitivas tareas para comprender la construcción de programas básicos utilizando bucles, funciones y procedimientos.

## Introduccion

Las computadoras ejecutan código de máquina, que está codificado como bytes, para llevar a cabo tareas en una computadora. Dado que diferentes computadoras tienen diferentes procesadores, el código de máquina ejecutado en estas computadoras es específico del procesador. En este caso, analizaremos la arquitectura del conjunto de instrucciones Intel x86-64 que se encuentra más comúnmente en la actualidad. El código de máquina generalmente está representado por una forma más legible del código llamado código de **ensamblaje**. Este código de máquina generalmente es producido por un compilador, que toma el código fuente de un archivo y, después de pasar por algunas etapas intermedias, produce código de máquina que puede ser ejecutado por una computadora. Sin entrar en demasiados detalles, Intel comenzó creando un conjunto de instrucciones de 16 bits, seguido de 32 bits, después de lo cual finalmente crearon 64 bits. Todos estos conjuntos de instrucciones se han creado para la compatibilidad con versiones anteriores, por lo que el código compilado para la arquitectura de 32 bits se ejecutará en máquinas de 64 bits. Como se mencionó anteriormente, antes de que se produzca un archivo ejecutable, el código fuente se compila primero en ensamblado (archivos .s), después de lo cual el ensamblador lo convierte en un programa objeto (archivos .o), y las operaciones con un enlazador finalmente lo convierten en un ejecutable (**binario**).

> esto es para iniciar el programa r2 y darle por parametro la opcion de debuggear el binario
```Python
r2 -d intro
```

> ya en r2 usamos **aa** para usar un analisis comun al binario, este analisa todos los simbolos y puntos de entrada del ejecutable, de esta misma forma podemos indicar a r2 que use una "disassembly syntax"  para AT&T
```Python
aa
e asm.syntax=att
```

> para el help podemos usar:
```Python
? //help normal
a? //help avanzado
```

> cuando el analisis este completo podemos hacer un listado de las funciones con
```Python
afl
```
![](/TheusZero/images/post/x86-64/afl.png)

> teniendo ya el main en la lista de funciones podemos visualisarlo con lo siguiente:
```Python
pdf @main
```
> donde **pdf** significa imprimir en codigo disassembl de la funcion
![](/TheusZero/images/post/x86-64/pdf.png)
>> la columna de la izquierda tiene los valores de la direccion de memoria de las instrucciones
>
>> la columna del medio tiene los valores de la izquierda pero encodeados a bytes (que esto es machine code)
>
>> la ultima columna tiene instrucciones legibles por el usuario (human readable instructions)

>> El **núcleo** del lenguaje **ensamblador** implica el uso de registros para hacer lo siguiente: 
>
>>> Transferir datos entre la memoria y el registro, y viceversa.
>
>>> Realizar operaciones aritméticas en registros y datos.
>
>>> Transferir el control a otras partes del programa.

> Since the architecture is x86-64, the registers are 64 bit and Intel has a list of 16 registers:
![](/TheusZero/images/post/x86-64/6432.png)

debido a que los registros son de 64 bits, significa que pueden almacenar hasta 64 bits de datos, también se puede hacer referencia a otras partes de los registros.
En este caso, los registros también pueden referenciarse como valores de 32 bits como se muestra.
Lo que no se muestra es que los registros pueden ser referenciados como 16 bits y 8 bits (4 bits más altos y 4 bits más bajos).

Los primeros 6 registros se conocen como registros de propósito general.
> El **%rsp** es el puntero del stack y apunta a la parte superior del stack que contiene la dirección de memoria más reciente.
> El stack es una estructura de datos que administra la memoria para los programas.

> El **%rbp** es un puntero de frame y apunta al frame de la función que se está ejecutando actualmente;
> cada función se ejecuta en un cuadro nuevo. 
> Para mover datos utilizando registros, se utilizan las siguientes instrucciones:
```Python
movq source, destination
```
> Esto involucra:
>> Transferring constants(which are prefixed using the $ operator) e.g. movq $3 rax would move the constant 3 to the register
>> Transferring values from a register e.g. movq %rax %rbx which involves moving value from rax to rbx
>> Transferring values from memory which is shown by putting registers inside brackets e.g. movq %rax (%rbx) which means move value stored in %rax to memory location represented by %rbx. 